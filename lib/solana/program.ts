import { AnchorProvider, Idl, Program, setProvider } from '@coral-xyz/anchor'
import { Connection, PublicKey } from '@solana/web3.js'

// IDL will be generated by Anchor. For the frontend, accept it as any.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type ShadowVault = Program<any>

export function getProgram(connection: Connection, wallet: AnchorProvider['wallet']): ShadowVault {
  const provider = new AnchorProvider(connection, wallet, { commitment: 'confirmed' })
  setProvider(provider)
  const programIdStr = process.env.NEXT_PUBLIC_PROGRAM_ID
  if (!programIdStr) throw new Error('NEXT_PUBLIC_PROGRAM_ID is required')
  const programId = new PublicKey(programIdStr)
  // Anchor automatically loads IDL via program ID if packaged; fallback to embedded IDL if available.
  // Here we construct a Program with empty IDL; methods must use .methods with correct names.
  // In production you would import the generated IDL JSON.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const idl: Idl = { version: '0.0.0', name: 'shadowvault', instructions: [] } as any
  const program = new Program(idl, programId, provider)
  return program as ShadowVault
}

export function deriveVaultPda(owner: PublicKey, programId: PublicKey): [PublicKey, number] {
  return PublicKey.findProgramAddressSync([Buffer.from('vault'), owner.toBuffer()], programId)
}

export function deriveIntentPda(user: PublicKey, vault: PublicKey, programId: PublicKey): [PublicKey, number] {
  return PublicKey.findProgramAddressSync([Buffer.from('intent'), user.toBuffer(), vault.toBuffer()], programId)
}
